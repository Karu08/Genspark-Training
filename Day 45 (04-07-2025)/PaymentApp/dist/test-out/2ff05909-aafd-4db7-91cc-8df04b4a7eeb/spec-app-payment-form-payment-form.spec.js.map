{
  "version": 3,
  "sources": ["src/app/payment-form/payment-form.spec.ts"],
  "sourcesContent": ["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { PaymentForm } from './payment-form';\n\ndescribe('PaymentFormComponent', () => {\n  let component: PaymentForm;\n  let fixture: ComponentFixture<PaymentForm>;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      imports: [PaymentForm] \n    }).compileComponents();\n\n    fixture = TestBed.createComponent(PaymentForm);\n    component = fixture.componentInstance;\n\n\n    (window as any).Razorpay = function () {\n      return { open: jasmine.createSpy('open') };\n    };\n\n    fixture.detectChanges();\n  });\n\n  it('should create the component', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should mark form invalid if fields are empty', () => {\n    component.paymentForm.setValue({\n      amount: '',\n      customerName: '',\n      email: '',\n      contactNumber: ''\n    } as any); \n    expect(component.paymentForm.invalid).toBeTrue();\n  });\n\n  it('should mark form valid with correct input', () => {\n    component.paymentForm.setValue({\n      amount: 100,\n      customerName: 'Test',\n      email: 'test@example.com',\n      contactNumber: '9876543210'\n    });\n    expect(component.paymentForm.valid).toBeTrue();\n  });\n\n  it('should show email as invalid if bad email given', () => {\n    component.paymentForm.setValue({\n      amount: 100,\n      customerName: 'User',\n      email: 'bademail',\n      contactNumber: '9876543210'\n    });\n    expect(component.paymentForm.get('email')?.valid).toBeFalse();\n  });\n\n  it('should call Razorpay.open() on valid form submit', () => {\n    const openSpy = jasmine.createSpy('open');\n    (window as any).Razorpay = function () {\n      return { open: openSpy };\n    };\n\n    component.paymentForm.setValue({\n      amount: 100,\n      customerName: 'Tester',\n      email: 't@example.com',\n      contactNumber: '9999999999'\n    });\n\n    component.onSubmit();\n    expect(openSpy).toHaveBeenCalled();\n  });\n});\n"],
  "mappings": ";;;;;;;;;;;;;;AAAA;;;AACA;AAEA,aAAS,wBAAwB,MAAK;AACpC,UAAI;AACJ,UAAI;AAEJ,iBAAW,MAAW;AACpB,cAAM,QAAQ,uBAAuB;UACnC,SAAS,CAAC,WAAW;SACtB,EAAE,kBAAiB;AAEpB,kBAAU,QAAQ,gBAAgB,WAAW;AAC7C,oBAAY,QAAQ;AAGnB,eAAe,WAAW,WAAA;AACzB,iBAAO,EAAE,MAAM,QAAQ,UAAU,MAAM,EAAC;QAC1C;AAEA,gBAAQ,cAAa;MACvB,EAAC;AAED,SAAG,+BAA+B,MAAK;AACrC,eAAO,SAAS,EAAE,WAAU;MAC9B,CAAC;AAED,SAAG,gDAAgD,MAAK;AACtD,kBAAU,YAAY,SAAS;UAC7B,QAAQ;UACR,cAAc;UACd,OAAO;UACP,eAAe;SACT;AACR,eAAO,UAAU,YAAY,OAAO,EAAE,SAAQ;MAChD,CAAC;AAED,SAAG,6CAA6C,MAAK;AACnD,kBAAU,YAAY,SAAS;UAC7B,QAAQ;UACR,cAAc;UACd,OAAO;UACP,eAAe;SAChB;AACD,eAAO,UAAU,YAAY,KAAK,EAAE,SAAQ;MAC9C,CAAC;AAED,SAAG,mDAAmD,MAAK;AACzD,kBAAU,YAAY,SAAS;UAC7B,QAAQ;UACR,cAAc;UACd,OAAO;UACP,eAAe;SAChB;AACD,eAAO,UAAU,YAAY,IAAI,OAAO,GAAG,KAAK,EAAE,UAAS;MAC7D,CAAC;AAED,SAAG,oDAAoD,MAAK;AAC1D,cAAM,UAAU,QAAQ,UAAU,MAAM;AACvC,eAAe,WAAW,WAAA;AACzB,iBAAO,EAAE,MAAM,QAAO;QACxB;AAEA,kBAAU,YAAY,SAAS;UAC7B,QAAQ;UACR,cAAc;UACd,OAAO;UACP,eAAe;SAChB;AAED,kBAAU,SAAQ;AAClB,eAAO,OAAO,EAAE,iBAAgB;MAClC,CAAC;IACH,CAAC;;;",
  "names": []
}
